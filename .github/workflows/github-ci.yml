name: test_ci
on:
  pull_request:
    branches: [ "master" ]

jobs:
  linter:
    name: Linter
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo to VM (runner)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch origin
        run: git fetch origin master

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.6

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y bc

      - name: Run linter
        run: |
          SCORE_LIMIT=9.9
          BASE=$(git merge-base origin/master HEAD)
          FILES=$(git diff --name-only --diff-filter=ACMR $BASE...HEAD | grep '\.py'$ | paste -sd' ' - || true)
          if [ -z "$FILES" ]; then
            echo "No python files has been changed, skipping linter"
          else
            echo "Changed files: $FILES"
            SCORE=$(pylint $FILES | grep 'Your code has been rated' | awk '{print $7}' | cut -d'/' -f1)
            echo "Static check score: $SCORE/10.0 - required: $SCORE_LIMIT"
            COMPARE=$(echo "$SCORE < $SCORE_LIMIT" | bc -l)
            if [ "$COMPARE" -eq 1 ]; then 
              echo "Code rating below threshold. Failing the job." 
              exit 1 
            fi
          fi

  test:
    name: Integration tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine3.20
        env:
          POSTGRES_DB: postgres_db
          POSTGRES_USER: postgres_user
          POSTGRES_PASSWORD: postgres_pass
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 60s
          --health-retries 5

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DJANGO_ENV: test

    steps:
      - name: Clone repo to VM (runner)
        uses: actions/checkout@v3

      - name: Fetch origin
        run: git fetch origin master

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.6

      - name: Install Postgres client
        run: |
          apt-get update
          apt-get install --yes postgresql-client

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install database
        run: |
          psql -h postgres -d postgres_db -U postgres_user -c  'CREATE DATABASE budget_test;' -U postgres
          psql -h postgres -d postgres_db -U postgres_user -c  "CREATE USER budget_user WITH PASSWORD 'budget_user';" -U postgres
          psql -h postgres -d postgres_db -U postgres_user -c  'GRANT ALL PRIVILEGES ON DATABASE budget_test TO budget_user;' -U postgres
        env:
          PGPASSWORD: postgres_pass

      - name: Run tests
        run: |
          pytest --ignore=budget_app/tests/smoke/
